{"name":"Easy Pieces","tagline":"","body":"# EasyPieces\r\n\r\nInformation about the CS111 EasyPieces project by Sarah Gilkinson can be found\r\nhere.\r\n\r\nThis will be kept up-to-date with implementation plan, work completed, and \r\nany additional resources.\r\n\r\nThe notebook recording progress on this project can be found \r\n[here](https://github.com/SarahKnits/EasyPieces-notebook).\r\n\r\nSee the \r\n[project requirements](http://www.cs.hmc.edu/~benw/teaching/cs111_fa14/project.html) \r\nfor instructions on setting up your project.\r\n\r\n### Introduction\r\n\r\nThis project is designed to make piecewise graphing easy and intuitive. By\r\nusing a syntax as close as possible to that shown in mathematics textbooks,\r\nPiecewiseGrapher quickly produces graphs with a variety of output options.\r\n\r\n### Program Syntax\r\n\r\nThe syntax for this language is designed to closely reflect the syntax shown\r\nin mathematics textbooks. Each line consists of three main parts - the function\r\nname, the equation, and the boundary conditions. \r\nFor example, the function shown in SampleGraph.png is represented as\r\n\r\n```\r\nf(x) = { x^2, 0 < x < 2\r\nf(x) = { x + 3, 2 <= x < 4\r\nf(x) = { sin(x), 4 <= x < 10\r\n```\r\n\r\nBefore the functions, you can set the label for the x and y axes, the title of\r\nthe graph, and the name of the file. This can be done as follows:\r\n\r\n```\r\nFilename: \"Graph 1\"\r\nTitle: \"Distance vs Time\"\r\nxLabel: \"Time\"\r\nyLabel: \"Distance\"\r\n```\r\n\r\nFunctions can be given any name, and any variable can be used. Currently \r\nsupported operations are:\r\n* Addition\r\n* Subtraction\r\n* Multiplication\r\n* Division\r\n* Powers\r\n* Absolute value\r\n* Sine\r\n* Cosine\r\n* Square roots\r\n* e\r\n* pi\r\n\r\nLimits must be presented in ascending order, with either < or <=. See\r\nsampleProgram.txt and sampleProgram2.txt for examples. \r\n\r\n### Tutorial\r\n\r\nTo use this program, make sure you have downloaded GNUplot and sbt. You will \r\nalso need to download the source code for PiecewiseGrapher. \r\n\r\nOnce you have downloaded the project, enter the PiecewiseGrapher directory. Type \r\n\r\n`` sbt compile ``\r\n\r\nIf there are any errors, make sure you have downloaded all dependencies and\r\nthat you are connected to the internet. After this has been completed, type\r\n\r\n`` sbt run ``\r\n\r\nYou will be presented with two options: \r\n\r\n``` \r\n[1] GraphDemo\r\n\r\n[2] Grapher\r\n```\r\n\r\nTo run the full grapher, select Grapher and hit enter. You will then be prompted\r\nto  type the name of the file containing the graph you want to make. Enter the \r\nname of your own file or use one of the included examples. These examples are\r\n\r\n```\r\nsamplePrograms/sampleProgram.txt\r\n\r\nsamplePrograms/sampleProgram2.txt\r\n```\r\n\r\nThe graph output will be placed in the docs/img directory and will be named\r\nGraph.png. \r\n\r\nIf you encounter any strange behavior, please submit an issue. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}